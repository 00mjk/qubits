0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.7.1
3 info using node@v4.2.6
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/angoh/stuff/eventuality',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/angoh/.npm/eventuality/0.1.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/angoh/.npm correctMkdir not in flight; initializing
10 info lifecycle eventuality@0.1.0~prepublish: eventuality@0.1.0
11 verbose lifecycle eventuality@0.1.0~prepublish: unsafe-perm in lifecycle true
12 verbose lifecycle eventuality@0.1.0~prepublish: PATH: /usr/local/lib/node_modules/npm/bin/node-gyp-bin:/Users/angoh/stuff/eventuality/node_modules/.bin:/usr/local/bin:/Users/angoh/.rvm/gems/ruby-2.2.1/bin:/Users/angoh/.rvm/gems/ruby-2.2.1@global/bin:/Users/angoh/.rvm/rubies/ruby-2.2.1/bin:/Users/angoh/Library/Haskell/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Postgres.app/Contents/Versions/9.4/bin:/.rvm/bin:/Users/angoh/.rvm/bin
13 verbose lifecycle eventuality@0.1.0~prepublish: CWD: /Users/angoh/stuff/eventuality
14 silly lifecycle eventuality@0.1.0~prepublish: Args: [ '-c', 'coffee -o build/ -c src/*.coffee' ]
15 silly lifecycle eventuality@0.1.0~prepublish: Returned: code: 0  signal: null
16 verbose tar pack [ '/Users/angoh/.npm/eventuality/0.1.0/package.tgz',
16 verbose tar pack   '/Users/angoh/stuff/eventuality' ]
17 verbose tarball /Users/angoh/.npm/eventuality/0.1.0/package.tgz
18 verbose folder /Users/angoh/stuff/eventuality
19 verbose addLocalTarball adding from inside cache /Users/angoh/.npm/eventuality/0.1.0/package.tgz
20 verbose correctMkdir /Users/angoh/.npm correctMkdir not in flight; initializing
21 silly cache afterAdd eventuality@0.1.0
22 verbose afterAdd /Users/angoh/.npm/eventuality/0.1.0/package/package.json not in flight; writing
23 verbose correctMkdir /Users/angoh/.npm correctMkdir not in flight; initializing
24 verbose afterAdd /Users/angoh/.npm/eventuality/0.1.0/package/package.json written
25 silly publish { name: 'eventuality',
25 silly publish   author: { name: 'akonwi' },
25 silly publish   version: '0.1.0',
25 silly publish   description: 'Some components for cqrs',
25 silly publish   repository:
25 silly publish    { type: 'git',
25 silly publish      url: 'git+https://github.com/akonwi/eventuality.git' },
25 silly publish   main: 'build/index.js',
25 silly publish   devDependencies:
25 silly publish    { coffeetape: '^1.0.1',
25 silly publish      'is-plain-obj': '^1.1.0',
25 silly publish      should: '^8.2.2',
25 silly publish      tape: '^4.4.0' },
25 silly publish   scripts:
25 silly publish    { test: 'coffeetape \'src/spec/*.coffee\' | faucet',
25 silly publish      prepublish: 'coffee -o build/ -c src/*.coffee' },
25 silly publish   keywords: [ 'cqrs' ],
25 silly publish   license: 'ISC',
25 silly publish   readme: '# Eventuality\nThis is simply a POC and my way of writing down my thoughts about how I would want to implement a CQRS system. The focus here is on components/tools and functions that can be interchanged rather than a full framework.\n\n## components\n  * Domain Model (Aggregate)\n    > This is the object that represents the state of our model. Only it can change its own state as a result of Commands. Each state change results in an Event.\n\n  * EventStore\n    > A storage facility for events/history/facts. This can be in memory or backed by a database. What I have here is in memory.\n\n  * EventBus\n    > The medium through which facts of state change are shared to interested observers.\n\n  * EventListeners\n    > These are the observers of facts of state changes. They are functions to be invoked when the domain model has changed its state.\n\n  * Repository\n    > A component through which we create and access the domain model.\n\n  * Commands\n    > Objects representing an intent of state change by the user on the domain model.\n\n  * CommandHandlers\n    > Functions with the purpose of communicating the intended state change to the domain model.  \n\n  * Events  \n    > Objects representing a fact of state change in the domain model.\n\nBased on these definitions of the components, the system should work like this:\n\n  > CommandHandlers are effectively `CH(Command) -> [...Event]`\n\n  >Actions the domain model can execute are `A() -> [...Event]`\n\nThis means every intention to change the state of the domain model results in *n* events (where n = 0 is a failure and n > 0 is success).\n\n## Examples of usage\nOf course, I\'ll use a Todo application because that\'s the app any system can build.\n\n``` coffeescript\nEventuality = require \'eventuality\'\n\nTodo = Eventuality.defineAggregate\n  name: \'Todo\'\n  state:\n    description: null\n    completed: false\n  methods:\n    complete: ->\n      @state.completed = true\n      Eventuality.Event(aggregateId: @id, name: \'TodoCompletedEvent\', payload: {completed: true}, state: @state)\n\nTodoCommands =\n  CreateTodo: ({id, description }) -> name: \'CreateTodo\', message: {id, description}\n  MarkAsCompleted: ({ id }) -> name: \'MarkAsCompleted\', message: {id}\n\nTodoEventStore = Eventuality.EventStore()\n# If you want to persist events somewhere else\n#\n# TodoEventStore = Eventuality.EventStore({\n#   add: (event) -> # put it somewhere\n#   getEvents: -> # return an array of events\n# })\n\nTodoRepository = Eventuality.Repository \'Todo\', Todo, TodoEventStore\n\nTodoCommandHandlers =\n  CreateTodo: (attrs) -> TodoRepository.add attrs\n  MarkAsCompleted: ({ id }) ->\n    todo = TodoRepository.load id\n    todo.complete()\n\nTodoEventBus = Eventuality.EventBus()\n\nTodoCreatedEventListenerToUpdateDB = (event) -> # Update database...\nTodoCreatedEventListenerToLogStuff = (event) -> # Do some logging...\n\nTodoEventBus.registerListeners\n  TodoCreatedEvent: [\n    TodoCreatedEventListenerToUpdateDB\n    TodoCreatedEventListenerToLogStuff\n  ]\n  TodoCompletedEvent: [\n    (event) ->\n      # More stuff to be done\n  ]\n```\n\n### It _can_(doesn\'t have to) all come together like so...\n``` coffeescript\nTodoFlow = Eventuality.Flow\n  eventStore: TodoEventStore\n  eventBus: TodoEventBus\n  commandHandlers: TodoCommandHandlers\n\n## Later when the user wants to do things...\nTodoFlow.dispatch TodoCommands.CreateTodo id: \'todo1\', description: \'Create a todo\'\nTodoFlow.dispatch TodoCommands.MarkAsCompleted id: \'todo1\'\n```\n',
25 silly publish   readmeFilename: 'README.md',
25 silly publish   gitHead: 'd9a20f4495918af06c9d79bac43cd68a68a32d89',
25 silly publish   bugs: { url: 'https://github.com/akonwi/eventuality/issues' },
25 silly publish   homepage: 'https://github.com/akonwi/eventuality#readme',
25 silly publish   _id: 'eventuality@0.1.0',
25 silly publish   _shasum: '94ac76183154a74ff86c744650232c2cfe85aba9',
25 silly publish   _from: '.' }
26 verbose getPublishConfig undefined
27 silly mapToRegistry name eventuality
28 silly mapToRegistry using default registry
29 silly mapToRegistry registry https://registry.npmjs.org/
30 silly mapToRegistry uri https://registry.npmjs.org/eventuality
31 verbose publish registryBase https://registry.npmjs.org/
32 silly publish uploading /Users/angoh/.npm/eventuality/0.1.0/package.tgz
33 verbose request uri https://registry.npmjs.org/eventuality
34 verbose request sending authorization for write operation
35 info attempt registry request try #1 at 7:29:28 PM
36 verbose request using bearer token for auth
37 verbose request id 82dada80420fb8c6
38 http request PUT https://registry.npmjs.org/eventuality
39 http 403 https://registry.npmjs.org/eventuality
40 verbose headers { 'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=300',
40 verbose headers   'content-length': '95',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   date: 'Tue, 19 Apr 2016 23:29:30 GMT',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   connection: 'keep-alive',
40 verbose headers   'x-served-by': 'cache-iad2148-IAD',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1461108569.789456,VS0,VE943',
40 verbose headers   vary: 'Accept-Encoding' }
41 verbose request invalidating /Users/angoh/.npm/registry.npmjs.org/eventuality on PUT
42 error publish Failed PUT 403
43 verbose stack Error: "You cannot publish over the previously published version 0.1.0." : eventuality
43 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
43 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
43 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
43 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:199:22)
43 verbose stack     at emitTwo (events.js:87:13)
43 verbose stack     at Request.emit (events.js:172:7)
43 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1036:10)
43 verbose stack     at emitOne (events.js:82:20)
43 verbose stack     at Request.emit (events.js:169:7)
43 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:963:12)
44 verbose statusCode 403
45 verbose pkgid eventuality
46 verbose cwd /Users/angoh/stuff/eventuality
47 error Darwin 15.4.0
48 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
49 error node v4.2.6
50 error npm  v3.7.1
51 error code E403
52 error "You cannot publish over the previously published version 0.1.0." : eventuality
53 error If you need help, you may report this error at:
53 error     <https://github.com/npm/npm/issues>
54 verbose exit [ 1, true ]
