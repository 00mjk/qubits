// Generated by CoffeeScript 1.10.0
(function() {
  var Event, assign;

  Event = require('./event');

  assign = require('./deepAssign');

  module.exports = function(Aggregate, eventStore, aggregateName) {
    var _load, add, cache, load, properties, remove;
    if (aggregateName == null) {
      aggregateName = void 0;
    }
    if (aggregateName == null) {
      aggregateName = Aggregate.__aggregate_name__;
    }
    cache = {};
    _load = function(aggregateId, events) {
      var aggregate, createdEvent, relevantEvents;
      relevantEvents = events.filter(function(event) {
        return event.aggregateId === aggregateId;
      });
      if (relevantEvents.length === 0 || relevantEvents.find(function(arg) {
        var name;
        name = arg.name;
        return name === (aggregateName + "DeletedEvent");
      })) {
        return null;
      } else {
        createdEvent = relevantEvents.splice(0, 1)[0];
        aggregate = Aggregate(assign({
          id: aggregateId
        }, createdEvent.payload));
        relevantEvents.forEach(function(event) {
          return Aggregate.__sourcing_methods__[event.name](event.payload, aggregate);
        });
        cache[aggregateId] = aggregate;
        return aggregate;
      }
    };
    add = function(attrs) {
      var aggregate;
      aggregate = Aggregate(assign({}, attrs));
      cache[aggregate.id] = aggregate;
      return Event({
        name: aggregateName + "CreatedEvent",
        aggregateId: aggregate.id,
        payload: attrs
      });
    };
    load = function(aggregateId) {
      var aggregate;
      if (aggregate = cache[aggregateId]) {
        return Promise.resolve(aggregate);
      } else {
        return new Promise(function(resolve, reject) {
          return Promise.resolve(eventStore.getEvents()).then(function(events) {
            if (aggregate = _load(aggregateId, events)) {
              return resolve(aggregate);
            } else {
              return reject();
            }
          });
        });
      }
    };
    remove = function(aggregateId) {
      return load(aggregateId).then(function(aggregate) {
        delete cache[aggregateId];
        return Promise.resolve(Event({
          name: aggregateName + "DeletedEvent",
          aggregateId: aggregateId,
          payload: {}
        }));
      });
    };
    properties = {
      add: {
        value: add
      },
      load: {
        value: load
      },
      "delete": {
        value: remove
      }
    };
    return Object.defineProperties({}, properties);
  };

}).call(this);
