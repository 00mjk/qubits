// Generated by CoffeeScript 1.10.0
(function() {
  var Event, assign;

  Event = require('./event');

  assign = require('./deepAssign');

  module.exports = function(Aggregate, eventStore, aggregateName) {
    var _load, add, cache, load, properties, remove;
    if (aggregateName == null) {
      aggregateName = void 0;
    }
    if (aggregateName == null) {
      aggregateName = Aggregate.__aggregate_name__;
    }
    cache = {};
    _load = function(aggregateId, events) {
      var loaded;
      loaded = null;
      events.reverse().some(function(event) {
        var agg;
        if (event.aggregateId === aggregateId) {
          if (event.name === (aggregateName + "DeletedEvent")) {
            loaded = null;
          } else {
            agg = Aggregate(assign({
              id: aggregateId
            }, event.state));
            cache[aggregateId] = agg;
            loaded = agg;
          }
          return true;
        }
      });
      return loaded;
    };
    add = function(attrs) {
      var agg, state;
      agg = Aggregate(assign({}, attrs));
      cache[agg.id] = agg;
      state = assign({}, agg.state);
      return Event({
        name: aggregateName + "CreatedEvent",
        aggregateId: agg.id,
        state: state,
        payload: attrs
      });
    };
    load = function(aggregateId) {
      var agg;
      if (agg = cache[aggregateId]) {
        return Promise.resolve(agg);
      } else {
        return Promise.resolve(eventStore.getEvents()).then(function(events) {
          return _load(aggregateId, events);
        });
      }
    };
    remove = function(aggregateId) {
      return load(aggregateId).then(function(agg) {
        if (agg.state == null) {
          Promise.reject("Could not load aggregate with id of " + aggregateId);
        }
        delete cache[aggregateId];
        return Promise.resolve(Event({
          name: aggregateName + "DeletedEvent",
          aggregateId: aggregateId,
          state: agg.state,
          payload: {}
        }));
      });
    };
    properties = {
      add: {
        value: add
      },
      load: {
        value: load
      },
      "delete": {
        value: remove
      }
    };
    return Object.defineProperties({}, properties);
  };

}).call(this);
