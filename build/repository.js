// Generated by CoffeeScript 1.10.0
(function() {
  var Event;

  Event = require('./event');

  module.exports = function(aggregateName, Aggregate, eventStore) {
    var _load, add, cache, load, properties, remove;
    aggregateName = aggregateName.trim();
    cache = {};
    _load = function(aggregateId, events) {
      var loaded;
      loaded = null;
      events.reverse().some(function(event) {
        var agg;
        if (event.aggregateId === aggregateId) {
          if (event.name === (aggregateName + "DeletedEvent")) {
            loaded = null;
          } else {
            agg = Aggregate(Object.assign({
              id: aggregateId
            }, event.state));
            cache[aggregateId] = agg;
            loaded = agg;
          }
          return true;
        }
      });
      return loaded;
    };
    add = function(attrs) {
      var agg, state;
      agg = Aggregate(Object.assign({}, attrs));
      cache[agg.id] = agg;
      state = Object.assign({}, agg.state);
      return Event({
        name: aggregateName + "CreatedEvent",
        aggregateId: agg.id,
        state: state,
        payload: attrs
      });
    };
    load = function(aggregateId) {
      var _events;
      if (cache[aggregateId]) {
        return cache[aggregateId];
      } else {
        _events = eventStore.getEvents();
        if (_events.then != null) {
          return _events.then(function(events) {
            return _load(aggregateId, events);
          });
        } else {
          return _load(aggregateId, _events);
        }
      }
    };
    remove = function(aggregateId) {
      var event, state;
      state = load(aggregateId).state;
      event = Event({
        name: aggregateName + "DeletedEvent",
        aggregateId: aggregateId,
        state: state
      });
      delete cache[aggregateId];
      return event;
    };
    properties = {
      add: {
        value: add
      },
      load: {
        value: load
      },
      "delete": {
        value: remove
      }
    };
    return Object.defineProperties({}, properties);
  };

}).call(this);
